// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Capstone-Kel-23/BE-Rest-API/domain"
	mock "github.com/stretchr/testify/mock"
)

// InvoiceRepository is an autogenerated mock type for the InvoiceRepository type
type InvoiceRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: invoice
func (_m *InvoiceRepository) Delete(invoice *domain.Invoice) error {
	ret := _m.Called(invoice)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Invoice) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *InvoiceRepository) FindAll() (*domain.Invoices, error) {
	ret := _m.Called()

	var r0 *domain.Invoices
	if rf, ok := ret.Get(0).(func() *domain.Invoices); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *InvoiceRepository) FindByID(id string) (*domain.Invoice, error) {
	ret := _m.Called(id)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string) *domain.Invoice); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByInvoiceNumber provides a mock function with given fields: invoiceNumber
func (_m *InvoiceRepository) FindByInvoiceNumber(invoiceNumber string) (*domain.Invoice, error) {
	ret := _m.Called(invoiceNumber)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string) *domain.Invoice); ok {
		r0 = rf(invoiceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOrderID provides a mock function with given fields: orderID
func (_m *InvoiceRepository) FindByOrderID(orderID string) (*domain.Invoice, error) {
	ret := _m.Called(orderID)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string) *domain.Invoice); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: status
func (_m *InvoiceRepository) FindByStatus(status string) (*domain.Invoices, error) {
	ret := _m.Called(status)

	var r0 *domain.Invoices
	if rf, ok := ret.Get(0).(func(string) *domain.Invoices); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: userid
func (_m *InvoiceRepository) FindByUserID(userid string) (*domain.Invoices, error) {
	ret := _m.Called(userid)

	var r0 *domain.Invoices
	if rf, ok := ret.Get(0).(func(string) *domain.Invoices); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDAndStatus provides a mock function with given fields: userid, status
func (_m *InvoiceRepository) FindByUserIDAndStatus(userid string, status string) (*domain.Invoices, error) {
	ret := _m.Called(userid, status)

	var r0 *domain.Invoices
	if rf, ok := ret.Get(0).(func(string, string) *domain.Invoices); ok {
		r0 = rf(userid, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userid, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: invoice, items, client, costs
func (_m *InvoiceRepository) Save(invoice *domain.Invoice, items *[]domain.Item, client *domain.Client, costs *[]domain.AdditionalCost) (*domain.Invoice, error) {
	ret := _m.Called(invoice, items, client, costs)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(*domain.Invoice, *[]domain.Item, *domain.Client, *[]domain.AdditionalCost) *domain.Invoice); ok {
		r0 = rf(invoice, items, client, costs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Invoice, *[]domain.Item, *domain.Client, *[]domain.AdditionalCost) error); ok {
		r1 = rf(invoice, items, client, costs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderID provides a mock function with given fields: orderID, id
func (_m *InvoiceRepository) UpdateOrderID(orderID string, id string) error {
	ret := _m.Called(orderID, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orderID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSnapToken provides a mock function with given fields: snapToken, id
func (_m *InvoiceRepository) UpdateSnapToken(snapToken string, id string) error {
	ret := _m.Called(snapToken, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(snapToken, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: status, invoiceNumber
func (_m *InvoiceRepository) UpdateStatus(status string, invoiceNumber string) (*domain.Invoice, error) {
	ret := _m.Called(status, invoiceNumber)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string, string) *domain.Invoice); ok {
		r0 = rf(status, invoiceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusByID provides a mock function with given fields: status, id
func (_m *InvoiceRepository) UpdateStatusByID(status string, id string) (*domain.Invoice, error) {
	ret := _m.Called(status, id)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string, string) *domain.Invoice); ok {
		r0 = rf(status, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusPayment provides a mock function with given fields: status, invoiceNumber
func (_m *InvoiceRepository) UpdateStatusPayment(status string, invoiceNumber string) (*domain.Invoice, error) {
	ret := _m.Called(status, invoiceNumber)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string, string) *domain.Invoice); ok {
		r0 = rf(status, invoiceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusPaymentByID provides a mock function with given fields: status, id
func (_m *InvoiceRepository) UpdateStatusPaymentByID(status string, id string) (*domain.Invoice, error) {
	ret := _m.Called(status, id)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string, string) *domain.Invoice); ok {
		r0 = rf(status, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTokenSnap provides a mock function with given fields: invoiceNumber, token
func (_m *InvoiceRepository) UpdateTokenSnap(invoiceNumber string, token string) (*domain.Invoice, error) {
	ret := _m.Called(invoiceNumber, token)

	var r0 *domain.Invoice
	if rf, ok := ret.Get(0).(func(string, string) *domain.Invoice); ok {
		r0 = rf(invoiceNumber, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(invoiceNumber, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInvoiceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvoiceRepository creates a new instance of InvoiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceRepository(t mockConstructorTestingTNewInvoiceRepository) *InvoiceRepository {
	mock := &InvoiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
